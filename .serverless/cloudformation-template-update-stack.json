{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "TutorialCRUDAPILogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-crud-api-lambda"
      }
    },
    "CronJobLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-cron-job"
      }
    },
    "NotificationHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-sqstosns-event-handler"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "sls-crud-api-dev",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-crud-api-lambda:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-cron-job:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-sqstosns-event-handler:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-crud-api-lambda:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-cron-job:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-sqstosns-event-handler:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:149571648582:table/sls-crud-api-dev-products"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": "arn:aws:sqs:us-east-1:149571648582:notification_queue"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:149571648582:notification-topic-sls-crud-api-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:us-east-1:149571648582:notification_queue"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "sls-crud-api-dev",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "TutorialCRUDAPILambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-crud-api-dev/dev/1703209995743-2023-12-22T01:53:15.743Z/sls-crud-api-dev.zip"
        },
        "Handler": "build/main",
        "Runtime": "go1.x",
        "FunctionName": "sls-crud-api-lambda",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE_NAME": "sls-crud-api-dev-products",
            "NOTIFY_QUEUE_URL": {
              "Ref": "NotificationQueue"
            },
            "NOTIFY_TOPIC_URL": {
              "Ref": "ProductCreationTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TutorialCRUDAPILogGroup"
      ]
    },
    "CronJobLambdaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-crud-api-dev/dev/1703209995743-2023-12-22T01:53:15.743Z/sls-crud-api-dev.zip"
        },
        "Handler": "build/cronHandler",
        "Runtime": "go1.x",
        "FunctionName": "sls-cron-job",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DYNAMODB_TABLE_NAME": "sls-crud-api-dev-products",
            "NOTIFY_QUEUE_URL": {
              "Ref": "NotificationQueue"
            },
            "NOTIFY_TOPIC_URL": {
              "Ref": "ProductCreationTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CronJobLambdaLogGroup"
      ]
    },
    "NotificationHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-crud-api-dev/dev/1703209995743-2023-12-22T01:53:15.743Z/sls-crud-api-dev.zip"
        },
        "Handler": "build/notification",
        "Runtime": "go1.x",
        "FunctionName": "sls-sqstosns-event-handler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "NOTIFY_QUEUE_URL": {
              "Ref": "NotificationQueue"
            },
            "NOTIFY_TOPIC_URL": {
              "Ref": "ProductCreationTopic"
            },
            "NOTIFY_TOPIC_ARN": "arn:aws:sns:us-east-1:149571648582:notification-topic-sls-crud-api-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NotificationHandlerLogGroup"
      ]
    },
    "TutorialCRUDAPILambdaVersionZpX3AHi8sH22zhJcA6vhZuHZ7iiqBDKxWApUqxUcLU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TutorialCRUDAPILambdaFunction"
        },
        "CodeSha256": "SANg9k6osCgsBHGgJ870q/+r/bKEJOAyrtKX9ipgYPs="
      }
    },
    "CronJobLambdaLambdaVersionARSvVHzJHuol8knoY5EgOuDrAAjq6YJ6n82R0MENzE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CronJobLambdaLambdaFunction"
        },
        "CodeSha256": "SANg9k6osCgsBHGgJ870q/+r/bKEJOAyrtKX9ipgYPs="
      }
    },
    "NotificationHandlerLambdaVersion0j49Bl5nh27UJjikhEKwU58SF4Z6o6RmSFXZNRBCrQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotificationHandlerLambdaFunction"
        },
        "CodeSha256": "SANg9k6osCgsBHGgJ870q/+r/bKEJOAyrtKX9ipgYPs="
      }
    },
    "CronJobLambdaEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(* * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CronJobLambdaLambdaFunction",
                "Arn"
              ]
            },
            "Id": "CronJobLambdaSchedule"
          }
        ]
      }
    },
    "CronJobLambdaLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CronJobLambdaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CronJobLambdaEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-sls-crud-api-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProduct": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "product",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProductPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TutorialCRUDAPILambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TutorialCRUDAPILambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TutorialCRUDAPILambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TutorialCRUDAPILambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TutorialCRUDAPILambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TutorialCRUDAPILambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProductDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProduct"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TutorialCRUDAPILambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TutorialCRUDAPILambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1703209992554": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodProductPost",
        "ApiGatewayMethodProductGet",
        "ApiGatewayMethodProductPut",
        "ApiGatewayMethodProductDelete"
      ]
    },
    "TutorialCRUDAPILambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TutorialCRUDAPILambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "NotificationHandlerEventSourceMappingSQSNotificationqueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": "arn:aws:sqs:us-east-1:149571648582:notification_queue",
        "FunctionName": {
          "Fn::GetAtt": [
            "NotificationHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "CRUDTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "sls-crud-api-dev-products",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },
    "ProductCreationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "notification-topic-sls-crud-api-dev"
      }
    },
    "TopicSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": "arn:aws:sns:us-east-1:149571648582:notification-topic-sls-crud-api-dev",
        "Endpoint": "durganarayanavarma@gmail.com"
      }
    },
    "NotificationQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "notification_queue"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-sls-crud-api-dev-dev-ServerlessDeploymentBucketName"
      }
    },
    "TutorialCRUDAPILambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TutorialCRUDAPILambdaVersionZpX3AHi8sH22zhJcA6vhZuHZ7iiqBDKxWApUqxUcLU"
      },
      "Export": {
        "Name": "sls-sls-crud-api-dev-dev-TutorialCRUDAPILambdaFunctionQualifiedArn"
      }
    },
    "CronJobLambdaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CronJobLambdaLambdaVersionARSvVHzJHuol8knoY5EgOuDrAAjq6YJ6n82R0MENzE"
      },
      "Export": {
        "Name": "sls-sls-crud-api-dev-dev-CronJobLambdaLambdaFunctionQualifiedArn"
      }
    },
    "NotificationHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotificationHandlerLambdaVersion0j49Bl5nh27UJjikhEKwU58SF4Z6o6RmSFXZNRBCrQ"
      },
      "Export": {
        "Name": "sls-sls-crud-api-dev-dev-NotificationHandlerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-sls-crud-api-dev-dev-ServiceEndpoint"
      }
    }
  }
}